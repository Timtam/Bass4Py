from typing import Any, Callable, Optional, Union

from .attributes.bytes_attribute import BytesAttribute
from .attributes.float_attribute import FloatAttribute
from .channel import Channel
from .output_device import OutputDevice

class Stream(Channel):

  def free(self) -> bool: ...
  def get_file_position(self, mode: int) -> int: ...
  def put_data(self, buffer: bytes, length: int) -> int: ...
  def put_file_data(self, buffer: bytes, length: int) -> int: ...
  def update(self, length: int) -> bool: ...
  
  @staticmethod
  def from_file(file: Union[str, bytes], flags: int = ..., offset: int = ..., device: Optional[OutputDevice] = ...) -> Stream: ...
  
  @staticmethod
  def from_bytes(data: bytes, flags: int = ..., length: int = ..., device: Optional[OutputDevice] = ...) -> Stream: ...
  
  @staticmethod
  def from_url(url: Union[str, bytes], flags: int = ..., offset: int = ..., callback: Optional[Callable[[Stream, bytes], None]] = ..., device: Optional[OutputDevice] = ...) -> Stream: ...
  
  @staticmethod
  def from_parameters(freq: int, chans: int, flags: int = ..., callback: Optional[Callable[[Stream, int], bytes]] = ..., device: Optional[OutputDevice] = ...) -> Stream: ...
  
  @staticmethod
  def from_device(device: OutputDevice) -> Stream: ...
  
  @staticmethod
  def from_device_3d(device: OutputDevice) -> Stream: ...
  
  @staticmethod
  def from_file_obj(obj: Any, system: int = ..., flags: int = ..., device: Optional[OutputDevice] = ...) -> Stream: ...
  
  @property
  def auto_free(self) -> bool: ...
  
  @auto_free.setter
  def auto_free(self, value: bool) -> None: ...
  
  @property
  def restrict_download(self) -> bool: ...
  
  @restrict_download.setter
  def restrict_download(self, value: bool) -> None: ...

  @property
  def bitrate(self) -> FloatAttribute: ...

  @property
  def net_resume(self) -> FloatAttribute: ...

  @property
  def scan_info(self) -> BytesAttribute: ...

  @property
  def tags(self) -> Any: ...

  @property
  def name(self) -> str: ...
