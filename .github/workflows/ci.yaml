on:
  push:
    branches-ignore:
      - 'gh-pages'
  pull_request: {}

jobs:
  ubuntu:
    runs-on: ${{matrix.os}}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - 
        name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
      - 
        name: "Download BASS"
        run: |
          wget http://www.un4seen.com/files/bass24-linux.zip
          wget http://www.un4seen.com/files/z/3/tags18-linux.zip
          7z x bass24-linux.zip -obass24-linux -r
          7z x tags18-linux.zip -otags18-linux -r
      - 
        name: "Install cibuildwheel"
        run: python -m pip install cibuildwheel
      - 
        name: "Build wheel"
        env:
          CIBW_BUILD: "${{ matrix.python-whl }}-manylinux*"
          CIBW_SKIP: pp*
          CIBW_ARCHS: auto64
          CIBW_BEFORE_BUILD: "pip install -r requirements-dev.txt && cp /project/bass24-linux/x64/libbass.so /usr/lib/libbass.so && cp /project/tags18-linux/x64/libtags.so /usr/lib/libtags.so"
        run: python -m cibuildwheel --platform linux
      - 
        name: "Upload wheel"
        uses: actions/upload-artifact@v3
        with:
          name: "Python ${{matrix.python-version}} (Linux)"
          path: wheelhouse/*.whl
      - 
        name: "Upload wheel to test PyPI"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload -r testpypi wheelhouse/*
    strategy:
      matrix:
        include:
          - 
            os: ubuntu-20.04
            python-version: "3.6"
            python-whl: "cp36"
          - 
            os: ubuntu-20.04
            python-version: "3.7"
            python-whl: "cp37"
          - 
            os: ubuntu-20.04
            python-version: "3.8"
            python-whl: "cp38"
          - 
            os: ubuntu-20.04
            python-version: "3.9"
            python-whl: "cp39"
          - 
            os: ubuntu-20.04
            python-version: "3.10"
            python-whl: "cp310"

  windows-x64:
    runs-on: ${{matrix.os}}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      BASSLIB: "bass24\\x64"
      TAGSLIB: "tags18"
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - 
        name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          architecture: ${{matrix.arch}}
      - 
        name: "Download BASS"
        shell: powershell
        run: |
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile("http://www.un4seen.com/files/bass24.zip", (Join-Path ($pwd).path "bass24.zip"))
          $wc.DownloadFile("http://www.un4seen.com/files/z/3/tags18.zip", (Join-Path ($pwd).path "tags18.zip"))
          & 7z --% x bass24.zip -obass24 -r
          & 7z --% x tags18.zip -otags18 -r
      - 
        name: "Install python dependencies"
        run: python -m pip install -r requirements-dev.txt
      - 
        name: "Build wheel"
        run: |
          python setup.py build_ext --inplace
          python setup.py bdist_wheel
      - 
        name: "Run tests"
        run: |
          python -m pytest --junitxml=junit/test-results-${{matrix.python-version}}_${{matrix.arch}}.xml
      - 
        name: "Upload wheel"
        uses: actions/upload-artifact@v3
        with:
          name: "Python ${{matrix.python-version}}_${{matrix.arch}} (Windows)"
          path: dist/*.whl
      - 
        name: "Publish test results"
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: "junit/test-results-${{matrix.python-version}}_${{matrix.arch}}.xml"
        if: ${{always()}}
      - 
        name: "Upload wheel to test PyPI"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload -r testpypi dist/*
    strategy:
      matrix:
        include:
          - 
            os: windows-2022
            python-version: "3.6"
            arch: "x64"
          - 
            os: windows-2022
            python-version: "3.7"
            arch: "x64"
          - 
            os: windows-2022
            python-version: "3.8"
            arch: "x64"
          - 
            os: windows-2022
            python-version: "3.9"
            arch: "x64"
          - 
            os: windows-2022
            python-version: "3.10"
            arch: "x64"
  windows-x86:
    runs-on: ${{matrix.os}}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      BASSLIB: "bass24"
      TAGSLIB: "tags18"
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - 
        name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: ${{matrix.python-version}}
          architecture: ${{matrix.arch}}
      - 
        name: "Download BASS"
        shell: powershell
        run: |
          $wc = New-Object System.Net.WebClient
          $wc.DownloadFile("http://www.un4seen.com/files/bass24.zip", (Join-Path ($pwd).path "bass24.zip"))
          $wc.DownloadFile("http://www.un4seen.com/files/z/3/tags18.zip", (Join-Path ($pwd).path "tags18.zip"))
          & 7z --% x bass24.zip -obass24 -r
          & 7z --% x tags18.zip -otags18 -r
      - 
        name: "Install python dependencies"
        run: python -m pip install -r requirements-dev.txt
      - 
        name: "Build wheel"
        run: |
          python setup.py build_ext --inplace
          python setup.py bdist_wheel
      - 
        name: "Run tests"
        run: |
          python -m pytest --junitxml=junit/test-results-${{matrix.python-version}}_${{matrix.arch}}.xml
      - 
        name: "Upload wheel"
        uses: actions/upload-artifact@v3
        with:
          name: "Python ${{matrix.python-version}}_${{matrix.arch}} (Windows)"
          path: dist/*.whl
      - 
        name: "Publish test results"
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: "junit/test-results-${{matrix.python-version}}_${{matrix.arch}}.xml"
        if: ${{always()}}
      - 
        name: "Upload wheel to test PyPI"
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m pip install twine
          python -m twine upload -r testpypi dist/*
    strategy:
      matrix:
        include:
          - 
            os: windows-2022
            python-version: "3.6"
            arch: "x86"
          - 
            os: windows-2022
            python-version: "3.7"
            arch: "x86"
          - 
            os: windows-2022
            python-version: "3.8"
            arch: "x86"
          - 
            os: windows-2022
            python-version: "3.9"
            arch: "x86"
          - 
            os: windows-2022
            python-version: "3.10"
            arch: "x86"

  build-docs:
    runs-on: windows-2022
    if: github.repository == 'Timtam/Bass4Py'
    needs: windows-x64
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v3
      - 
        name: "Install Python"
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - 
        name: "Install python dependencies"
        run: python -m pip install -r requirements-doc.txt
      - 
        name: "Download artifact"
        uses: actions/download-artifact@v3
        with:
          name: "Python 3.8_x64 (Windows)"
      - 
        name: "Install Bass4Py wheel"
        shell: bash
        run: |
          pip install $(/usr/bin/find . -name Bass4Py*.whl)
      - 
        name: "Build docs"
        run: |
          make html
        working-directory: ${{github.workspace}}/doc
      - 
        name: "Upload docs"
        uses: actions/upload-artifact@v3
        with:
          name: "Docs"
          path: doc/_build/html/

  push-docs:
    runs-on: windows-2022
    needs: build-docs
    steps:
      - 
        name: "Checkout gh-pages"
        uses: actions/checkout@v2
        with:
          ref: 'gh-pages'
      - 
        name: "Remove old docs"
        shell: bash
        run: |
          GLOBIGNORE=.nojekyll:.git
          rm -rf -v *
      - 
        name: "Download pre-built docs"
        uses: actions/download-artifact@v3
        with:
          name: Docs
      - 
        name: "Git Push"
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "timtam@users.noreply.github.com"
          git commit -am "Automated docs built by GitHub Actions workflow"
          git push
